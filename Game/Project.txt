//----------------------------------------------------------------------------//
// Структура файлов и папок:
//----------------------------------------------------------------------------//

Build - скрипты для автоматизации сборки ресурсов и сжатой версии
Build/Temp - временная папка для объектных файлов
Assets - Исходные игровые ресурсы, сжимаются с помощью Packer.exe в Data.pack
Data - папка с игровыми ресурсами. создается скриптами автоматизации при сборке или приложением при запуске Data.pack. (Можно удалять)
Shaders -  исходный текст шейдеров
Shaders/Cache -  скомпилированные шейдера. создаются при сборке. (Можно удалять)
timestamp и log.txt - файлы создаваемые приложением. (Можно удалять)
	timestamp - маркер актуальности папки Data.	(время извлечения игровых ресурсов)
	Если время модификации timestamp меньше или равно, файлы в папке Data актуальны. 
	Если файл timestamp отсутствует или создан позже папки Data, то запускается генерация игровых ресурсов с сохранением в Data.
	
//----------------------------------------------------------------------------//
// Текущие задачи/план разработки
//----------------------------------------------------------------------------//
 


 *Алгоритм извлечения/кеширования игровых ресурсов
 *Библиотека основных классов
 *Математическая библиотека
 *Графический движок
	- обертка над GAPI
	- высокоуровневое представление графических объектов
		- материал
		- меш
		- ...
	- рендеринг 2D
		- спрайты
		- шрифты
		- пользовательский интерфейс
	- рендеринг 3D
		- сцена
		- постэффекты
 *Физический движок
	-формы
		- сфера
		- выпуклая геометрия
		- карта высот
	- обнаружение столкновений
		- широкая фаза на базе dbvt
		- список контактов
	- динамика твердого тела
	...
 *Сцена
	- Совмещение физического и графического представлений объекта
	- Аниации
	- Система отсечения/поиска в пространстве на базе dbvt
 *Звук
	- источник звука
	- звуковой буфер
	- выбор активных источников
	- генерация звуков/музыки (?)
*Игра
	...

	
//----------------------------------------------------------------------------//
// Проделанная работа
//----------------------------------------------------------------------------//
 
 *25/01/2016
	- Создание и настройка проекта
	- Минимальная реализация окна и цикла обработки сообщений
	- Контектст OpenGL
	- Ведение лога (в консоль)
	- Математическая библиотека (Vec2 3 4 i, Mat34 44, Color ...) - минимальная реализация
	- Генерация и отрисовка шрифта (перенос из другого проекта)

*27/01/2016
	- Настройка автоматической сборки с crinkler
	- Packer - утилита для упаковки ресурсов с помощью LZ4
		- Простая реализация запаковки/распаковки одного файла
		- Реализация минимального декодера LZ4 (для переноса в игру)
	- Отказ от OpenGL (сломалась дискретная видеокарта, а встроенная GMA X3100 поддерживает GL 1.4 максимум)
		- Переход на Direct3D9
		- Создание устройства
		- Очистка экрана

*28/01/2016	
	- Доработка	Packer
		- Доработка декодера LZ4
		- Обработка аргументов
		- Потоки ввода/вывода
		- Запаковка файлов и папок в архив
	- Формат и буфер вершин
	- Избавление от лишних зависимостей студии (vcruntime, ucrt и т.д)
		- Релизная сборка использует mcvrt.dll
	- Сохранение лога в файл

*29/01/2016
	- Дорабтока Packer
		 - Режим конвертации бинарных файлов в текстовый файл (для вcтавки в игру)
	- Автоматизация сборки встроенных игровых ресурсов (проект Assets)
		- Компиляция шейдеров
		- Простое добавление игровых ресурсов
		- Запаковка всех игровых ресурсов и скомпилированных шейдеров с помощью Packer в Assets.inc - для вставки в игру
		* Коэффициент сжатия <= ~5.1 позволит уместить около 120 кб данных.
	- Рефакторинг структуры файлов и папок проекта
	- class Array<T>

*30/01/2016
	- Рефакторинг структуры файлов и папок проекта
	- svn (https://github.com/Zakhar-V/Game32k.git/trunk)


	

