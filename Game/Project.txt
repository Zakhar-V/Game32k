//----------------------------------------------------------------------------//
// Основные файлы и папки:
//----------------------------------------------------------------------------//

Build - скрипты для автоматизации сборки ресурсов и сжатой версии
Build/Temp - временная папка для объектных файлов
Build/Temp/Assets.pack - сжатые игровые ресурсы и шейдера, преобразуются с помощью Packer.exe в Assets.inc
Assets - Исходные игровые ресурсы, сжимаются с помощью Packer.exe и упаковываются в Build/Temp/Assets.pack
Shaders - Шейдера - сжимаются с помощью Packer.exe и упаковываются в Build/Temp/Assets.pack
Data - папка с игровыми ресурсами. создается скриптами автоматизации при сборке или приложением при запуске. (Можно удалять)
log.txt - файлы создаваемые приложением. (Можно удалять)
Data/hash - маркер актуальности папки Data. (контрольная сумма встроенных ресурсов)
		
//----------------------------------------------------------------------------//
// Текущие задачи
//----------------------------------------------------------------------------//

- Sampler, BlendState, DepthState, RasterizerState

- Node
	- Трансформации (реализовать функции)
- Dbvt
- Camera
- Model

- Рендеринг сцены

***
 - Основные подсистемы сцены и компоненты
 - Загрузка/Сохранение уровня

 - Гереация контента (моделей/текстур/уровней) при первом запуске и сохранение на диск

 - Игровой цикл

 - Состояние приложения (меню/игра/пауза)

 - Приступить к разработке звуковой системы

***
 - Сортировка массива
 - Обновление иерархии узлов
 - Карта высот/ландшафт
 - Рендеринг сцены
 - Система отсечение невидимой геометрии


 - Загрузка/сохранение текстур (bmp/dds)
 - Скрипт генерации текстур

//----------------------------------------------------------------------------//
// Проделанная работа
//----------------------------------------------------------------------------//
 
 *25/01/2016
	- Создание и настройка проекта
	- Минимальная реализация окна и цикла обработки сообщений
	- Контектст OpenGL
	- Ведение лога (в консоль)
	- Математическая библиотека (Vec2 3 4 i, Mat34 44, Color ...) - минимальная реализация
	- Генерация и отрисовка шрифта (перенос из другого проекта)

*27/01/2016
	- Настройка автоматической сборки с crinkler
	- Packer - утилита для упаковки ресурсов с помощью LZ4
		- Простая реализация запаковки/распаковки одного файла
		- Реализация минимального декодера LZ4 (для переноса в игру)
	- Отказ от OpenGL (сломалась дискретная видеокарта, а встроенная GMA X3100 поддерживает GL 1.4 максимум)
		- Переход на Direct3D9
		- Создание устройства
		- Очистка экрана

*28/01/2016	
	- Доработка	Packer
		- Доработка декодера LZ4
		- Обработка аргументов
		- Потоки ввода/вывода
		- Запаковка файлов и папок в архив
	- Формат и буфер вершин
	- Избавление от лишних зависимостей студии (vcruntime, ucrt и т.д)
		- Релизная сборка использует mcvrt.dll
	- Сохранение лога в файл

*29/01/2016
	- Дорабтока Packer
		 - Режим конвертации бинарных файлов в текстовый файл (для вcтавки в игру)
	- Автоматизация сборки встроенных игровых ресурсов (проект Assets)
		- Компиляция шейдеров
		- Простое добавление игровых ресурсов
		- Запаковка всех игровых ресурсов и скомпилированных шейдеров с помощью Packer в Assets.inc - для вставки в игру
		* Коэффициент сжатия <= ~5.1 позволит уместить около 120 кб данных.
	- Рефакторинг структуры файлов и папок проекта
	- class Array<T>

*30/01/2016
	- Рефакторинг структуры файлов и папок проекта
	- svn (https://github.com/Zakhar-V/Game32k.git/trunk)

*31/01/2016
	- Загрузка скомпилированных шейдеров
	- Тестовая отрисовка с использованием шейдеров

*1/02/2016
	- Математическая библиотека (Vec3, Quat, Mat44)

*2/02/2016
	- Дорабтока Packer
		 - Режим подстчета контрольной суммы (SDBM) с сохранением в файл (опционально)
	- Автоматическое извлечение и распаковка встроенных данных
	- Автоматическое создание log.txt при первом сообщении
	- Система подсчета ссылок (RefCounted, Object, WeakReference, Ptr<T>, Ref<T>)

*3/02/2016
	- Математическая библиотека 
		- доработка Quat, Mat44
	- Node
	- Scene

*4/02/2016
	- asm math

*5/02/2016
	- Texture (2d)

*6/02/2016
	- Image
		- Генерация шрифта
	- Сжатие с помощью UPX

*7/02/2016
	- Математическая библиотека 
		- Шум перлина
	- Image
		- Генерация rgb шума и шума перлина
		- Выборка с линейной фильтрацией
	- Node
		- Добавление и удаление из сцены
		- Иерархия трансформаций
	- Device (бывший Window)
		- курсор (позиция и режим камеры)
	

*8/02/2016
	- Тесты/Отладка
	- Мелкие правки
	- Удаление/Добавление узлов в сцену
	
*9/02/2016
	- Рефакторинг
		- Функционал модуля Renderer перенесен в Graphics и Scene
		- Функционал модуля Collision перенесен в Math 
	- Sampler
	- Texture
		- Создание из изображения
	- Image
		- Создание уровней детализации (для POT текстур RGBA)

*10/02/2016
	- Тестовая камера и перспективная матрица

*11/02/2016
	- Geometry (интерфейс)
	- Рендеринг спрайтов
	- Генерация	ландшафта из карты высот (основа)

*13/02/2016
	- RenderModel
	- Рефакторинг
		- Переделан рендеринг спрайтов
		- Убран класс Geometry

*15-18/02/2016
	- Связный список
	- Проектирование сцены и компонентной системы
	- Component/Entity

*19/02/2016
	- TransformSystem
	- OpenGL Graphics (Загрузка функций)

*20-21/02/2016
	- Отказ от Direct3D9
	- class String
	- OpenGL
		- class Buffer
		- struct Vertex
			- универсальный формат вершины, 36 байт
		- class Shader
			- Простая реализация Uber шейдеров
			- Загрузка
		- Шейдера (общий файл)
		- Инициализация контекста 3.x
		- Установка буферов/шейдеров, очистка экрана
	
*22/02/2016
	- class Image
		- данные в формате float
	- class PixelBox
		- данные в любом формате
	- class Texture
		- Изменение размера
		- Чтение/запись
		- Генерация лодов
	- Отладочный вывод GL_ARB_debug_output (4.3)
	- class RenderBuffer
		- Multisample
		- Копирование в текстуру
	- Рендер в текстуру


		
