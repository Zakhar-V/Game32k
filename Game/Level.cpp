#include "Level.hpp"

//----------------------------------------------------------------------------//
//
//----------------------------------------------------------------------------//

//----------------------------------------------------------------------------//
/*Entity::Entity(void) :
	m_prevEntity(nullptr),
	m_nextEntity(nullptr),
	m_inLevel(false)
{

}
//----------------------------------------------------------------------------//
Entity::~Entity(void)
{
}
//----------------------------------------------------------------------------//
void Entity::AddToLevel(bool _add)
{
	if (m_inLevel == _add)
		return;

	if (m_inLevel)
	{
		m_inLevel = false;
		gLevel->_RemoveEntity(this);
		_OnRemoved();
		Release();
	}
	else
	{
		AddRef();
		m_inLevel = true;
		gLevel->_AddEntity(this);
		_OnAdded();
	}
}
//----------------------------------------------------------------------------//

//----------------------------------------------------------------------------//
// Level
//----------------------------------------------------------------------------//

//----------------------------------------------------------------------------//
Level::Level(void) :
	m_entities(nullptr)
{
}
//----------------------------------------------------------------------------//
Level::~Level(void)
{
	while (m_entities)
		m_entities->AddToLevel(false);
}
//----------------------------------------------------------------------------//
void Level::_AddEntity(Entity* _entity)
{
	Link(m_entities, _entity, _entity->m_prevEntity);
}
//----------------------------------------------------------------------------//
void Level::_RemoveEntity(Entity* _entity)
{
	Unlink(m_entities, _entity, _entity->m_prevEntity);
}
//----------------------------------------------------------------------------//
*/
//----------------------------------------------------------------------------//
//
//----------------------------------------------------------------------------//
